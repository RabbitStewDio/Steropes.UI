<?xml version="1.0" encoding="utf-8"?>
<!--
  MIT License

  Copyright (c) 2011-2016 Elisée Maurer, Sparklin Labs, Creative Patterns
  Copyright (c) 2016 Thomas Morgner, Rabbit-StewDio Ltd.
 
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
 
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
 
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
-->
<xsd:schema id="style"
    targetNamespace="http://www.steropes-ui.org/namespaces/style/1.0"
    elementFormDefault="qualified"
    xmlns="http://www.steropes-ui.org/namespaces/style/1.0"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
>
  <xsd:annotation>
    <xsd:documentation>
      This schema exists to provide auto-complete hints for XML editors.
      
      As the contents of the styling rules is dependent on the style-key
      and property-types defined in code, this schema cannot be used to
      validate style-sheet contents.
      
      Types in this document are marked as "mixed content" so that IntelliJ
      and other valdiating tools do not complain about pretty-printed XML
      documents.
    </xsd:documentation>
  </xsd:annotation>

  <xsd:complexType mixed="false" name="insetsType">
    <xsd:choice>
      <xsd:element name="all" type="xsd:integer" minOccurs="0" maxOccurs="1"/>
      <xsd:sequence>
        <xsd:element name="top" type="xsd:integer" minOccurs="0" maxOccurs="1"/>
        <xsd:element name="left" type="xsd:integer" minOccurs="0" maxOccurs="1"/>
        <xsd:element name="bottom" type="xsd:integer" minOccurs="0" maxOccurs="1"/>
        <xsd:element name="right" type="xsd:integer" minOccurs="0" maxOccurs="1"/>
      </xsd:sequence>
    </xsd:choice>
  </xsd:complexType>

  <xsd:complexType mixed="false" name="textureType">
    <xsd:sequence>
      <xsd:element name="name" type="xsd:string" minOccurs="0" maxOccurs="1"/>
      <xsd:element type="insetsType" name="corners" minOccurs="0" maxOccurs="1"/>
      <xsd:element type="insetsType" name="margins" minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType mixed="false" name="fontsType">
    <xsd:sequence>
      <xsd:element name="name" type="xsd:string" minOccurs="0" maxOccurs="1"/>
      <xsd:element name="y-offset" type="xsd:integer" minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType mixed="true" name="propertyType">
    <xsd:annotation>
      <xsd:documentation>
        Property values can either by simple strings (used for enumerations 
        and values that can be parsed as strings [Colors, Numbers, etc]) or
        complex objects (used for textures, margins etc).
        
        There is probably a good case to be made for splitting complex objects
        into separate style-keys, similar to what we see in CSS-Borders, for
        instance. This would allow inheritance and the cascading aspect of 
        style-rules to be much more powerful, at the expense of making the
        compound values harder to access.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="0" maxOccurs="1">
      <xsd:element type="textureType" name="texture"/>
      <xsd:element type="insetsType" name="insets"/>
      <xsd:element type="fontsType" name="font"/>
    </xsd:choice>
    <xsd:attribute type="xsd:boolean" name="inherit" use="optional"/>
    <xsd:attribute type="xsd:string" name="name" use="required"/>
  </xsd:complexType>

  <xsd:complexType mixed="false" name="attributeType">
    <xsd:sequence>
      <xsd:element type="xsd:string" name="name"/>
      <xsd:element type="xsd:string" name="type"/>
      <xsd:element type="xsd:string" name="value"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:complexType mixed="false" name="conditionsType">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element type="xsd:string" name="pseudo-class"/>
      <xsd:element type="xsd:string" name="class"/>
      <xsd:element type="xsd:string" name="id"/>
      <xsd:element type="attributeType" name="attribute"/>
      <xsd:element type="conditionsType" name="or"/>
      <xsd:element type="conditionsType" name="not"/>
    </xsd:choice>
  </xsd:complexType>
  
  <xsd:complexType mixed="false" name="styleType">
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="property" type="propertyType"/>
      <xsd:element name="style" type="styleType"/>
      <xsd:element name="conditions" type="conditionsType"/>
    </xsd:choice>
    <xsd:attribute type="xsd:boolean" name="direct-child" use="optional" default="false"/>
    <xsd:attribute type="xsd:string" name="element" use="required"/>
  </xsd:complexType>

  <xsd:simpleType name="texturePackerAttr">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="auto"/>
      <xsd:enumeration value="disabled"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType mixed="false" name="stylesType">
    <xsd:annotation>
      <xsd:documentation>
        The styles element represents a collection of style-rules. 
        Styles-elements can be nested to take advantage of modern IDEs 
        collapsing of regions and to form logical groups of style rules 
        for documentation purposes. 
        
        When parsing style documents, style elements are parsed in their
        order of appearance in the document in a depth-first fashion; 
        nesting thus does not change that order.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="styles" type="stylesType"/>
      <xsd:element name="style" type="styleType"/>
    </xsd:choice>
    <xsd:attribute name="texture-packer" type="texturePackerAttr" use="optional" default="disabled"/>
  </xsd:complexType>


  <xsd:element name="styles" type="stylesType">
    <xsd:annotation>
      <xsd:documentation>
        This is the only valid root element for styles. See "stylesType" for contents.
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>

</xsd:schema>
